Cara Mendapatkan JWT dan Access Token dari Full Service Account JSON di Next.js
1. Ambil isi Service Account JSON dari database
Misalnya kamu sudah simpan dalam table credentials, dan JSON-nya berisi seperti ini:

json
Copy
Edit
{
  "type": "service_account",
  "project_id": "your-project-id",
  "private_key_id": "xxxx",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIE...==\n-----END PRIVATE KEY-----\n",
  "client_email": "your-service-account@your-project-id.iam.gserviceaccount.com",
  "client_id": "123456789",
  ...
}
Kamu bisa load ini dari Prisma, Sequelize, atau raw SQL sesuai stack kamu.

2. Gunakan library google-auth-library untuk membuat JWT dan dapatkan access token
Install dulu:

bash
Copy
Edit
npm install google-auth-library
Contoh kode Next.js API route (misalnya /api/token):

ts
Copy
Edit
import { GoogleAuth } from 'google-auth-library';

export default async function handler(req, res) {
  // Misal kamu ambil dari database (contoh dummy)
  const serviceAccount = await getServiceAccountFromDB(); // as JSON object

  const auth = new GoogleAuth({
    credentials: serviceAccount,
    scopes: ['https://www.googleapis.com/auth/cloud-platform'], // atau sesuai kebutuhan
  });

  const client = await auth.getClient();
  const accessTokenResponse = await client.getAccessToken();

  return res.status(200).json({
    accessToken: accessTokenResponse.token,
    expiresIn: 3600, // in seconds
  });
}
3. Kalau ingin manual generate JWT (tanpa google-auth-library)
Kalau kamu mau buat JWT-nya sendiri untuk dapat access token (misalnya untuk mempelajari flow-nya), kamu bisa gunakan jsonwebtoken.

bash
Copy
Edit
npm install jsonwebtoken axios
Lalu:

ts
Copy
Edit
import jwt from 'jsonwebtoken';
import axios from 'axios';

const getAccessTokenFromJWT = async (serviceAccount) => {
  const now = Math.floor(Date.now() / 1000);
  const payload = {
    iss: serviceAccount.client_email,
    scope: 'https://www.googleapis.com/auth/cloud-platform',
    aud: 'https://oauth2.googleapis.com/token',
    iat: now,
    exp: now + 3600,
  };

  const token = jwt.sign(payload, serviceAccount.private_key, {
    algorithm: 'RS256',
    header: {
      kid: serviceAccount.private_key_id,
      typ: 'JWT',
      alg: 'RS256',
    },
  });

  const params = new URLSearchParams();
  params.append('grant_type', 'urn:ietf:params:oauth:grant-type:jwt-bearer');
  params.append('assertion', token);

  const res = await axios.post('https://oauth2.googleapis.com/token', params, {
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
  });

  return res.data.access_token;
};